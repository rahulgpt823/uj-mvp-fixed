// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  name      String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id            Int            @id @default(autoincrement())
  name          String
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  subcategories Subcategory[]
}

model Subcategory {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])
  products    Product[]
}

model Product {
  id            Int           @id @default(autoincrement())
  name          String
  sku           String        @unique
  price         Float
  salePrice     Float?
  stockQuantity Int
  karat         String
  weight        Float
  description   String
  tags          String[]
  isPublished   Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subcategoryId Int
  subcategory   Subcategory   @relation(fields: [subcategoryId], references: [id])
  images        ProductImage[]
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  publicId  String?
  createdAt DateTime @default(now())
  productId Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}
