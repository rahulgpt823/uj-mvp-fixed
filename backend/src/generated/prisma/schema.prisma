// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id              Int           @id @default(autoincrement())
  name            String        @unique
  description     String?
  slug            String        @unique // For SEO-friendly URLs
  metaTitle       String?
  metaDescription String?
  subcategories   Subcategory[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Subcategory {
  id          Int       @id @default(autoincrement())
  name        String
  slug        String // For SEO-friendly URLs
  description String?
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([categoryId, slug])
}

model Product {
  id              Int               @id @default(autoincrement())
  name            String
  slug            String // For SEO-friendly URLs
  gender          Gender
  description     String?
  netWeight       Float
  grossWeight     Float?
  huid            String            @unique
  sku             String            @unique
  karat           Karat
  price           Decimal           @db.Decimal(10, 2)
  salePrice       Decimal?          @db.Decimal(10, 2)
  stockQuantity   Int               @default(0)
  isPublished     Boolean           @default(false)
  publishedAt     DateTime?
  subcategoryId   Int
  subcategory     Subcategory       @relation(fields: [subcategoryId], references: [id])
  tags            ProductTagMap[]
  flairs          ProductFlairMap[]
  images          ProductImage[]
  variants        ProductVariant[]
  materials       ProductMaterial[]
  metaTitle       String?
  metaDescription String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@unique([subcategoryId, slug])
}

model ProductVariant {
  id            Int      @id @default(autoincrement())
  productId     Int
  name          String
  size          String?
  color         String?
  price         Decimal  @db.Decimal(10, 2)
  salePrice     Decimal? @db.Decimal(10, 2)
  sku           String   @unique
  stockQuantity Int      @default(0)
  product       Product  @relation(fields: [productId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Material {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  description String?
  products    ProductMaterial[]
}

model ProductMaterial {
  productId  Int
  materialId Int
  percentage Float?
  product    Product  @relation(fields: [productId], references: [id])
  material   Material @relation(fields: [materialId], references: [id])

  @@id([productId, materialId])
}

model ProductTag {
  id       Int             @id @default(autoincrement())
  name     String          @unique
  slug     String          @unique
  products ProductTagMap[]
}

model ProductTagMap {
  productId Int
  tagId     Int
  product   Product    @relation(fields: [productId], references: [id])
  tag       ProductTag @relation(fields: [tagId], references: [id])

  @@id([productId, tagId])
}

model Flair {
  id       Int               @id @default(autoincrement())
  name     String            @unique
  color    String? // Color code for UI display
  products ProductFlairMap[]
}

model ProductFlairMap {
  productId Int
  flairId   Int
  product   Product @relation(fields: [productId], references: [id])
  flair     Flair   @relation(fields: [flairId], references: [id])

  @@id([productId, flairId])
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  imageUrl  String
  cloudId   String? // Cloud provider's image ID
  alt       String? // Alt text for SEO
  priority  Int      @default(99)
  width     Int?
  height    Int?
  isDefault Boolean  @default(false)
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@index([productId, priority])
}

enum Gender {
  Male
  Female
  Unisex
}

enum Karat {
  k18
  k22
  k24
}
